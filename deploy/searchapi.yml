AWSTemplateFormatVersion: '2010-09-09'
Description: >
    A long running ECS service that serves a JSON API for Search over GraphQL.
Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: Select a VPC that allows instances access to the Internet.
  SubnetId:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Select at two subnets in your selected VPC.
  DesiredCapacity:
    Type: Number
    Default: '1'
    Description: Number of instances to launch in your ECS cluster.
  ECSCluster:
    Type: String
    Description: Reference to Shared ECS Cluster.
  ECSSecurityGroup:
    Type: String
    Description: Reference to Shared ECS Cluster Security Group.
  ALBListener:
    Type: String
    Description: Reference to Shared Application Load Balancer Listener.    
  ListenerPriority:
    Type: String
    Default: '99'
    Description: The Priority for the Listener Rule - unique for the ALB.
  ApiVersion:
    Type: String
    Default: 'latest'
    Description: Version of the search-api and policy-store docker image.
  EnvironmentName:
    Type: String
    Description: An environment name that will be prefixed to resource names.
  ApplicationPath:
    Type: String
    Default: ''
    Description: The application base URL path for the Search API deployment.
Resources:
  CloudwatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['-', [ECSLogGroup, !Ref 'AWS::StackName']]
      RetentionInDays: 14
  taskdefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Join ['', [!Ref 'AWS::StackName', -ecs-search-api]]
      ContainerDefinitions:
      - Name: !Sub "search-api-${EnvironmentName}"
        Cpu: '10'
        Environment:
          - Name: DB_URL
            Value: !Sub "mongodb://policy-store-${EnvironmentName}/policy-search-db"
          - Name: PORT
            Value: 3000
          - Name: BASE_URL
            Value: !Ref 'ApplicationPath'
        Essential: 'true'
        Image: !Sub "702557701840.dkr.ecr.ap-southeast-2.amazonaws.com/search-api:${ApiVersion}"
        Memory: '192'
        Links:
          - !Sub "policy-store-${EnvironmentName}"
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group: !Ref 'CloudwatchLogsGroup'
            awslogs-region: !Ref 'AWS::Region'
            awslogs-stream-prefix: ecs-search-api
        Command: ['start']
        PortMappings:
        - ContainerPort: 3000
      - Name: !Sub "policy-store-${EnvironmentName}"
        Cpu: '10'
        Essential: 'true'
        Image: !Sub "702557701840.dkr.ecr.ap-southeast-2.amazonaws.com/policy-store:${ApiVersion}"
        Memory: '256'
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group: !Ref 'CloudwatchLogsGroup'
            awslogs-region: !Ref 'AWS::Region'
            awslogs-stream-prefix: ecs-search-api
  ECSALBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
      - Type: forward
        TargetGroupArn: !Ref 'ECSTG'
      Conditions:
      - Field: path-pattern
        Values:
          - !Sub "${ApplicationPath}/*"
      ListenerArn: !Ref 'ALBListener'
      Priority: !Ref 'ListenerPriority'
  ECSTG:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: !Sub "${ApplicationPath}/healthcheck"
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Name: !Sub "SearchAPITargetGroup-${EnvironmentName}"
      Port: 3000
      Protocol: HTTP
      TargetType: instance
      UnhealthyThresholdCount: 5
      VpcId: !Ref 'VpcId'
  service:
    Type: AWS::ECS::Service
    DependsOn: ECSALBListenerRule
    Properties:
      Cluster: !Ref 'ECSCluster'
      HealthCheckGracePeriodSeconds: 500
      DesiredCount: !Ref 'DesiredCapacity'
      LoadBalancers:
      - ContainerName: !Sub "search-api-${EnvironmentName}"
        ContainerPort: '3000'
        TargetGroupArn: !Ref 'ECSTG'
      Role: !Ref 'ECSServiceRole'
      TaskDefinition: !Ref 'taskdefinition'
  ECSServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyName: ecs-service
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action: ['elasticloadbalancing:DeregisterInstancesFromLoadBalancer', 'elasticloadbalancing:DeregisterTargets',
              'elasticloadbalancing:Describe*', 'elasticloadbalancing:RegisterInstancesWithLoadBalancer',
              'elasticloadbalancing:RegisterTargets', 'ec2:Describe*', 'ec2:AuthorizeSecurityGroupIngress',
              "ecr:GetAuthorizationToken",
              "ecr:BatchCheckLayerAvailability",
              "ecr:GetDownloadUrlForLayer",
              "ecr:GetRepositoryPolicy",
              "ecr:DescribeRepositories",
              "ecr:ListImages",
              "ecr:DescribeImages",
              "ecr:BatchGetImage",
              "ecr:InitiateLayerUpload",
              "ecr:UploadLayerPart",
              "ecr:CompleteLayerUpload",
              "ecr:PutImage"]
            Resource: '*'
Outputs:
  taskdef:
    Value: !Ref 'taskdefinition'
